name: Build and Upload Binary

on:
  release:
    types:
      - created

permissions:
  contents: write

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install necessary compilers and tools
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mingw-w64 neofetch jq curl

      # Step 3: Run neofetch
      - name: Run neofetch
        run: neofetch

      # Step 4: Compile the Linux binary
      - name: Build Linux binary
        run: g++ -static -o ./main ./src/*.cpp

      # Step 5: Compile the Windows binary
      - name: Build Windows binary
        run: x86_64-w64-mingw32-g++ -static -static-libgcc -static-libstdc++ -o ./main.exe ./src/*.cpp

      # Step 6: Upload the compiled Linux binary
      - name: Upload Linux binary to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./main
          asset_name: main-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Upload the compiled Windows binary
      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./main.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Submit Linux binary to VirusTotal
      - name: Submit Linux binary to VirusTotal
        id: vt_linux
        run: |
          response=$(curl --silent --request POST \
            --url https://www.virustotal.com/api/v3/files \
            --header "x-apikey: ${{ secrets.VT_API_KEY }}" \
            --form file=@main)

          echo "$response" > vt_linux_response.json
          ANALYSIS_ID=$(echo "$response" | jq -r '.data.id')
          LINK="https://www.virustotal.com/file/${ANALYSIS_ID}/analysis/"
          echo "LINUX_VT=$LINK" >> $GITHUB_ENV

      # Step 9: Submit Windows binary to VirusTotal
      - name: Submit Windows binary to VirusTotal
        id: vt_windows
        run: |
          response=$(curl --silent --request POST \
            --url https://www.virustotal.com/api/v3/files \
            --header "x-apikey: ${{ secrets.VT_API_KEY }}" \
            --form file=@main.exe)

          echo "$response" > vt_windows_response.json
          ANALYSIS_ID=$(echo "$response" | jq -r '.data.id')
          LINK="https://www.virustotal.com/file/${ANALYSIS_ID}/analysis/"
          echo "WINDOWS_VT=$LINK" >> $GITHUB_ENV

      # Step 10: Append VirusTotal links to the release body
      - name: Append VirusTotal links to the release body
        uses: actions/github-script@v6
        with:
          script: |
            // Get the release details
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            // Update the release body with VirusTotal scan links
            const updatedBody = `${release.body || ""}

            Unsure about the legitimacy of the files? See the [workflow](https://github.com/benja2998/multitoolplusplus/blob/main/.github/workflows/build-and-upload.yml) to see they weren't tampered with!
            
            ðŸ›¡ **VirusTotal Scan Results**
            - [Linux binary scan](https://virustotal.com)
            - [Windows binary scan](https://virustotal.com)`;

            // Update the release with new body content
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: updatedBody
            });
